#####################################################################
Date: Thu Nov 2 16:17:28 2023 +0100
From: 8301b33dad51cafd9d08876fc91a7e5fa556dcd3 Fri Mar 24 15:59:07 2023
Source: Sky & Android OpenSource Project
Subject: Fix the compilation issues in the Linux environment
#####################################################################
diff --git a/libcutils/ashmem-host.cpp b/libcutils/ashmem-host.cpp
index 2ba1eb0..7cb179d 100644
--- a/libcutils/ashmem-host.cpp
+++ b/libcutils/ashmem-host.cpp
@@ -32,7 +32,9 @@
 #include <time.h>
 #include <unistd.h>
 
+#ifdef __ANDOIRD__
 #include <utils/Compat.h>
+#endif
 
 static bool ashmem_validate_stat(int fd, struct stat* buf) {
     int result = fstat(fd, buf);
diff --git a/libcutils/include/cutils/atomic.h b/libcutils/include/cutils/atomic.h
index 0c88bfe..6f8df41 100644
--- a/libcutils/include/cutils/atomic.h
+++ b/libcutils/include/cutils/atomic.h
@@ -19,7 +19,12 @@
 
 #include <stdint.h>
 #include <sys/types.h>
+#ifdef __cplusplus
+#include <atomic>
+using namespace std;
+#else
 #include <stdatomic.h>
+#endif
 
 #ifndef ANDROID_ATOMIC_INLINE
 #define ANDROID_ATOMIC_INLINE static inline
diff --git a/libcutils/include/cutils/trace.h b/libcutils/include/cutils/trace.h
index 98ae0d4..7c9ab1d 100644
--- a/libcutils/include/cutils/trace.h
+++ b/libcutils/include/cutils/trace.h
@@ -18,7 +18,12 @@
 #define _LIBS_CUTILS_TRACE_H
 
 #include <inttypes.h>
+#ifdef __cplusplus
+#include <atomic>
+using namespace std;
+#else
 #include <stdatomic.h>
+#endif
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdio.h>
diff --git a/libutils/Errors.cpp b/libutils/Errors.cpp
index 74f3bef..fe51afa 100644
--- a/libutils/Errors.cpp
+++ b/libutils/Errors.cpp
@@ -14,6 +14,9 @@
  * limitations under the License.
  */
 #include <utils/Errors.h>
+#ifdef __linux__
+#include <cstring>
+#endif
 
 namespace android {
 
diff --git a/libutils/String8.cpp b/libutils/String8.cpp
index 3690389..b7c92f0 100644
--- a/libutils/String8.cpp
+++ b/libutils/String8.cpp
@@ -25,6 +25,9 @@
 
 #include <ctype.h>
 
+#ifdef __linux__
+#include <limits>
+#endif
 #include <string>
 
 #include "SharedBuffer.h"
diff --git a/libutils/include/utils/CallStack.h b/libutils/include/utils/CallStack.h
index 7a4a345..9b161ba 100644
--- a/libutils/include/utils/CallStack.h
+++ b/libutils/include/utils/CallStack.h
@@ -20,7 +20,9 @@
 #include <memory>
 
 #include <android/log.h>
+#if !defined(__linux__)
 #include <backtrace/backtrace_constants.h>
+#endif
 #include <utils/String8.h>
 #include <utils/Vector.h>
 
@@ -38,6 +40,18 @@
 # endif // !WEAKS_AVAILABLE
 #endif // CALLSTACK_WEAK predefined
 
+#ifdef __linux__
+// When the pid to be traced is set to this value, then trace the current
+// process. If the tid value is not BACKTRACE_NO_TID, then the specified
+// thread from the current process will be traced.
+#define BACKTRACE_CURRENT_PROCESS (-1)
+// When the tid to be traced is set to this value, then trace the specified
+// current thread of the specified pid.
+#define BACKTRACE_CURRENT_THREAD (-1)
+
+#define MAX_BACKTRACE_FRAMES 256
+#endif
+
 #define ALWAYS_INLINE __attribute__((always_inline))
 
 namespace android {
diff --git a/libutils/include/utils/Vector.h b/libutils/include/utils/Vector.h
index be35ea2..5326706 100644
--- a/libutils/include/utils/Vector.h
+++ b/libutils/include/utils/Vector.h
@@ -256,7 +256,11 @@ Vector<TYPE>& Vector<TYPE>::operator = (const Vector<TYPE>& rhs) {
 
 template<class TYPE> inline
 const Vector<TYPE>& Vector<TYPE>::operator = (const Vector<TYPE>& rhs) const {
+#ifdef __linux__
+    VectorImpl::operator = (rhs);
+#else
     VectorImpl::operator = (static_cast<const VectorImpl&>(rhs));
+#endif
     return *this;
 }
 
diff --git a/libcutils/include/cutils/threads.h b/libcutils/include/cutils/threads.h
index 0082c6c634..5f6e032eef 100644
--- a/libcutils/include/cutils/threads.h
+++ b/libcutils/include/cutils/threads.h
@@ -31,9 +31,11 @@ extern "C" {
 //
 // Deprecated: use android::base::GetThreadId instead, which doesn't truncate on Mac/Windows.
 //
+#ifdef __ANDROID__
 #if !defined(__GLIBC__) || __GLIBC__ >= 2 && __GLIBC_MINOR__ < 32
 extern pid_t gettid();
 #endif
+#endif

 #ifdef __cplusplus
 }
