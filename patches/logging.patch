#####################################################################
Date: Thu Nov 2 11:23:41 2023 +0100
From: ec3daa6f52131c87da38e1c7be6b374e3ccf6e0d Thu Jan 26 02:19:15
Source: Sky & Android OpenSource Project
Subject: Fix the compilation issues in the Linux environment
#####################################################################
diff --git a/liblog/include/cutils/list.h b/liblog/include/cutils/list.h
new file mode 100644
index 0000000..7eb8725
--- /dev/null
+++ b/liblog/include/cutils/list.h
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+
+#include <stddef.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+struct listnode
+{
+    struct listnode *next;
+    struct listnode *prev;
+};
+
+#define node_to_item(node, container, member) \
+    (container *) (((char*) (node)) - offsetof(container, member))
+
+#define list_declare(name) \
+    struct listnode name = { \
+        .next = &(name), \
+        .prev = &(name), \
+    }
+
+#define list_for_each_reverse(node, list) \
+    for ((node) = (list)->prev; (node) != (list); (node) = (node)->prev)
+
+#define list_for_each_safe(node, n, list) \
+    for ((node) = (list)->next, (n) = (node)->next; \
+         (node) != (list); \
+         (node) = (n), (n) = (node)->next)
+
+#define list_for_each(node, list)                                                \
+    for (struct listnode* __n = ((node) = (list)->next)->next; (node) != (list); \
+         (node) = __n, __n = (node)->next)
+
+static inline void list_init(struct listnode *node)
+{
+    node->next = node;
+    node->prev = node;
+}
+
+static inline void list_add_tail(struct listnode *head, struct listnode *item)
+{
+    item->next = head;
+    item->prev = head->prev;
+    head->prev->next = item;
+    head->prev = item;
+}
+
+static inline void list_add_head(struct listnode *head, struct listnode *item)
+{
+    item->next = head->next;
+    item->prev = head;
+    head->next->prev = item;
+    head->next = item;
+}
+
+static inline void list_remove(struct listnode *item)
+{
+    item->next->prev = item->prev;
+    item->prev->next = item->next;
+}
+
+#define list_empty(list) ((list) == (list)->next)
+#define list_head(list) ((list)->next)
+#define list_tail(list) ((list)->prev)
+
+#ifdef __cplusplus
+};
+#endif /* __cplusplus */
diff --git a/liblog/logger.h b/liblog/logger.h
index ddff19d..7a91e78 100644
--- a/liblog/logger.h
+++ b/liblog/logger.h
@@ -16,7 +16,13 @@
 
 #pragma once
 
+#ifdef __cplusplus
+#include <atomic>
+using namespace std;
+#else
 #include <stdatomic.h>
+#endif
+
 #include <sys/cdefs.h>
 
 #include <log/log.h>
diff --git a/liblog/logger_write.cpp b/liblog/logger_write.cpp
index 9a9a126..41a6123 100644
--- a/liblog/logger_write.cpp
+++ b/liblog/logger_write.cpp
@@ -29,9 +29,11 @@
 
 #include <atomic>
 
+#ifdef __ANDROID__
 #include <android-base/errno_restorer.h>
 #include <android-base/macros.h>
 #include <private/android_filesystem_config.h>
+#endif
 #include <private/android_logger.h>
 
 #include "android/log.h"
@@ -52,7 +54,9 @@
 #include <windows.h>
 #endif
 
+#ifdef __ANDROID__
 using android::base::ErrnoRestorer;
+#endif
 
 #define LOG_BUF_SIZE 1024
 
@@ -295,7 +299,9 @@ int __android_log_write(int prio, const char* tag, const char* msg) {
 }
 
 void __android_log_write_log_message(__android_log_message* log_message) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   if (log_message->buffer_id != LOG_ID_DEFAULT && log_message->buffer_id != LOG_ID_MAIN &&
       log_message->buffer_id != LOG_ID_SYSTEM && log_message->buffer_id != LOG_ID_RADIO &&
@@ -317,7 +323,9 @@ void __android_log_write_log_message(__android_log_message* log_message) {
 }
 
 int __android_log_buf_write(int bufID, int prio, const char* tag, const char* msg) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   if (!__android_log_is_loggable(prio, tag, ANDROID_LOG_VERBOSE)) {
     return -EPERM;
@@ -330,7 +338,9 @@ int __android_log_buf_write(int bufID, int prio, const char* tag, const char* ms
 }
 
 int __android_log_vprint(int prio, const char* tag, const char* fmt, va_list ap) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   if (!__android_log_is_loggable(prio, tag, ANDROID_LOG_VERBOSE)) {
     return -EPERM;
@@ -347,7 +357,9 @@ int __android_log_vprint(int prio, const char* tag, const char* fmt, va_list ap)
 }
 
 int __android_log_print(int prio, const char* tag, const char* fmt, ...) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   if (!__android_log_is_loggable(prio, tag, ANDROID_LOG_VERBOSE)) {
     return -EPERM;
@@ -367,7 +379,9 @@ int __android_log_print(int prio, const char* tag, const char* fmt, ...) {
 }
 
 int __android_log_buf_print(int bufID, int prio, const char* tag, const char* fmt, ...) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   if (!__android_log_is_loggable(prio, tag, ANDROID_LOG_VERBOSE)) {
     return -EPERM;
@@ -416,7 +430,9 @@ void __android_log_assert(const char* cond, const char* tag, const char* fmt, ..
 }
 
 int __android_log_bwrite(int32_t tag, const void* payload, size_t len) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   struct iovec vec[2];
 
@@ -429,7 +445,9 @@ int __android_log_bwrite(int32_t tag, const void* payload, size_t len) {
 }
 
 int __android_log_stats_bwrite(int32_t tag, const void* payload, size_t len) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   struct iovec vec[2];
 
@@ -442,7 +460,9 @@ int __android_log_stats_bwrite(int32_t tag, const void* payload, size_t len) {
 }
 
 int __android_log_security_bwrite(int32_t tag, const void* payload, size_t len) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   struct iovec vec[2];
 
@@ -460,7 +480,9 @@ int __android_log_security_bwrite(int32_t tag, const void* payload, size_t len)
  * handy if we just want to dump an integer into the log.
  */
 int __android_log_btwrite(int32_t tag, char type, const void* payload, size_t len) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   struct iovec vec[3];
 
@@ -479,7 +501,9 @@ int __android_log_btwrite(int32_t tag, char type, const void* payload, size_t le
  * event log.
  */
 int __android_log_bswrite(int32_t tag, const char* payload) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   struct iovec vec[4];
   char type = EVENT_TYPE_STRING;
@@ -502,7 +526,9 @@ int __android_log_bswrite(int32_t tag, const char* payload) {
  * security log.
  */
 int __android_log_security_bswrite(int32_t tag, const char* payload) {
+#ifdef __ANDROID__
   ErrnoRestorer errno_restorer;
+#endif
 
   struct iovec vec[4];
   char type = EVENT_TYPE_STRING;
diff --git a/liblog/logger_write.h b/liblog/logger_write.h
index eee2778..f14c276 100644
--- a/liblog/logger_write.h
+++ b/liblog/logger_write.h
@@ -18,4 +18,14 @@
 
 #include <string>
 
+// This template function declaration is used in defining arraysize.
+// Note that the function doesn't need an implementation, as we only
+// use its type.
+template <typename T, size_t N>
+char(&ArraySizeHelper(T(&array)[N]))[N];  // NOLINT(readability/casting)
+
+#define arraysize(array) (sizeof(ArraySizeHelper(array)))
+
+#define UNUSED(x) (void)(x)
+
 std::string& GetDefaultTag();
diff --git a/liblog/properties.cpp b/liblog/properties.cpp
index bd5f5e7..fd15054 100644
--- a/liblog/properties.cpp
+++ b/liblog/properties.cpp
@@ -24,7 +24,9 @@
 
 #include <algorithm>
 
+#ifdef __ANDROID__
 #include <android-base/macros.h>
+#endif
 
 #include <private/android_logger.h>
 
